{"version":3,"sources":["serviceWorker.js","App.js","pages/Home.js","store/const.js","pages/Login.js","store/actions.js","router/index.js","pages/About.js","pages/History.js","store/reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","App","_ref","route","react_default","a","createElement","style","backgroundColor","color","react_router_dom","to","renderRoutes","routes","Home","this","props","ctx","Component","INCREMENT","DECREMENT","Login","_Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","username","handleLogin","bind","assertThisInitialized","handleIncrement","handleDecrement","inherits","createClass","key","value","e","preventDefault","Sentry","history","push","dispatch","type","className","placeholder","defaultValue","onClick","counter","component","connect","addCounter","path","exact","restricted","initialState","combineReducers","arguments","length","undefined","assign","dsn","debug","store","createStore","reducers","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d5c9447.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { renderRoutes } from 'react-router-config'\nimport { Link } from 'react-router-dom';\n\nconst App = ({ route }) => (\n  <div>\n    <h1>Root</h1>\n    <div style={{backgroundColor: 'red', color: '#fff'}}>\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/about\">About</Link></li>\n        <li><Link to=\"/login\">Logout</Link></li>\n      </ul>\n    </div>\n\n    {/* child routes won't render without this */}\n    {renderRoutes(route.routes)}\n  </div>\n)\n\n\nexport default App;\n","import React, {Component} from 'react'\nimport { renderRoutes } from 'react-router-config'\n\nclass Home extends Component {\n  // constructor(props) {\n  //   super(props)\n  // }\n  render() {\n    return (\n      <div>\n        <h1>Home</h1>{this.props.ctx}\n        {renderRoutes(this.props.routes)}\n      </div>\n    )\n  }\n}\n\nexport default Home","export const INCREMENT = 'INCREMENT'\nexport const DECREMENT = 'DECREMENT'\n","import React, {Component} from 'react'\n// import { renderRoutes } from 'react-router-config'\n// import { Link } from 'react-router-dom';\nimport {connect} from 'react-redux'\nimport {increment, decrement} from '../store/actions'\nimport * as Sentry from '@sentry/browser'\n\n// Sentry.init({\n//   dsn: 'http://a8a010e4d80143d19509fab9e2899df7:e6c9edc95dc94d2c9f0ad8fc7b88ac0a@127.0.0.1:9000/5',\n//   debug: true\n// })\n\nexport class Login extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      username: 'hello'\n    }\n    this.handleLogin = this.handleLogin.bind(this)\n    this.handleIncrement = this.handleIncrement.bind(this)\n    this.handleDecrement = this.handleDecrement.bind(this)\n  }\n  handleLogin(e) {\n    e.preventDefault();\n\n    // TODO: \n    if (this.state.username !== 'hello1') {\n      Sentry.captureMessage('123登陆用户名错误, 应该是:hello1， 输入的是:' + this.state.username)\n      return false\n    }\n    this.props.history.push('/')\n  }\n  handleIncrement (e) {\n    e.preventDefault()\n    const {dispatch} = this.props\n    dispatch(increment())\n  }\n  handleDecrement (e) {\n    e.preventDefault()\n    const {dispatch} = this.props\n    dispatch(decrement())\n  }\n  render() {\n    return (\n      <div>\n    <div className=\"login-container\">\n      <form>\n        <input placeholder=\"用户名\" type=\"text\" defaultValue={this.state.username}/>\n        <input placeholder=\"密码\" type=\"password\"/>\n        <button onClick={this.handleLogin}>Login</button>\n        <button onClick={this.handleIncrement}>add</button>\n        <button onClick={this.handleDecrement}>decrement</button>\n        <div>{this.props.counter}</div>\n      </form>\n    </div>\n  </div>\n    )\n  }\n}\n\nconst mapStateToProps = state =>{\n  return ({\n    counter: state.addCounter.counter\n  })\n} \n\nexport default connect(mapStateToProps)(Login)","import { INCREMENT, DECREMENT } from './const'\n\n// const actions = [\n//   {\n//     type: INCREMENT,\n//     // text: '12'\n//     completed: true\n//   }\n// ]\n// 封装一个函数\nfunction increment () {\n  return {\n    type: INCREMENT\n  }\n}\n\nfunction decrement () {\n  return {\n    type: DECREMENT\n  }\n}\n\nexport {\n  increment,\n  decrement\n}","// import React from 'react'\n// import { HashRouter, Route, Switch, Redirect, Router } from 'react-router-dom'\nimport App from '../App'\nimport Home from '../pages/Home'\nimport History from '../pages/History'\nimport About from '../pages/About'\nimport Login from '../pages/Login'\n\nconst routes = [\n  {\n    component: Login,\n    path: '/login'\n  },\n  {\n    component: App,\n    routes: [\n      {\n        path: '/',\n        exact: true,\n        component: Home\n      },\n      {\n        path: '/about',\n        component: About\n      },\n      {\n        path: '/history',\n        restricted: false,\n        component: History\n      }\n    ]\n  }\n  \n];\n\nexport default routes\n","import React from 'react'\nimport { renderRoutes } from 'react-router-config'\n\nexport default ({routes}) =>  (\n  <div>\n    <h1>About</h1>\n    {renderRoutes(routes)}\n  </div>\n)","import React from 'react'\nimport { renderRoutes } from 'react-router-config'\n\nexport default ({routes}) =>  (\n  <div>\n    <h1>History</h1>\n    {renderRoutes(routes)}\n  </div>\n)","import { combineReducers } from \"redux\";\n\nconst initialState = {\n  counter: 0\n}\n\nfunction addCounter(state = initialState, action) {\n  switch(action.type) {\n    case 'INCREMENT': \n      return Object.assign({}, state, {counter: state.counter + 1})\n    case 'DECREMENT': \n      return Object.assign({}, state, {counter: state.counter - 1})\n    default: \n      return state\n  }\n} \n\n\nexport default combineReducers({\n  addCounter\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport { renderRoutes } from 'react-router-config'\nimport routes from './router'\nimport { Provider } from 'react-redux'\nimport {createStore} from 'redux'\nimport reducers from './store/reducers'\nimport * as Sentry from '@sentry/browser'\n\nSentry.init({\n  dsn: 'http://a8a010e4d80143d19509fab9e2899df7:e6c9edc95dc94d2c9f0ad8fc7b88ac0a@127.0.0.1:9000/5',\n  debug: true\n})\n\nconst store = createStore(reducers)\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      {renderRoutes(routes)}\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}